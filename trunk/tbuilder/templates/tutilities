
#ifndef TWORKSPACE_CPP_UTILITIES_HPP
#define TWORKSPACE_CPP_UTILITIES_HPP

#include <cstdlib>
#include <fstream>
#include <iterator>
#include <algorithm>

enum error_t
{
        SUCCESS,
        INVALID_PROCESSOR_ID
};

error_t set_active_processor(const int& cpu)
{
        size_t size = 0;
        int num_cpus = 4;
        cpu_set_t* mask = CPU_ALLOC(num_cpus);
        size = CPU_ALLOC_SIZE(num_cpus);
        CPU_ZERO_S(size, mask);
        CPU_SET_S(cpu, size, mask);
        pid_t pid  = 0;
        if(-1 == sched_setaffinity(pid, size, mask)) {
                return INVALID_PROCESSOR_ID;
        }
        return SUCCESS;
}

std::string get_path()
{
        const char* c = std::getenv("DEV_ROOT");
        if(0 == c) {
                std::cerr << "The DEV_ROOT doesn't specified." << std::endl;
        }
        std::string s(c);
        s += "/";
        return s;
}

template <typename T>
error_t read_file(const std::string& s, T& a) throw()
{
        std::string h = get_path() + s;
        std::ifstream f(h.c_str());
        if( !f.is_open()) {
                std::cerr << "The \"" << h 
                        << "\" file doesn't exists." << std::endl;
        }
        f >> a;
        f.close();
        return a;
}

template <typename T>
error_t print_r(const T* a, const T* b) {
        std::copy(a, b, std::ostream_iterator<T>(std::cout, " "));
        std::cout << std::endl;
        return SUCCESS;
}

#endif // TWORKSPACE_CPP_UTILITIES_HPP
